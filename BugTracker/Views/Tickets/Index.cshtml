@model IEnumerable<BugTracker.Models.Ticket>
@using Microsoft.AspNet.Identity;
@using GridMvc.Html
@using System;

@*@{
        ViewBag.Title = "Index";
    }*@
<script src="@Url.Content("~/Scripts/jquery-3.4.1.min.js")"></script>
<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<link href="@Url.Content("~/Content/Css/bootstrap.min.css")" rel="stylesheet" type="text/css" />

<h2>T I C K E T S</h2>

@if (User.IsInRole("Submitter"))
{
    <p class=" btn btn-warning" style="margin-top: 20px">
        @Html.ActionLink("Create New", "CreateTicket")
    </p>
}

@using (Html.BeginForm())
{
    <p style="float: right">
        Find: @Html.TextBox("SearchString")
        <input type="submit" value="Search" />
    </p>
}

@Html.Grid(Model).Columns(columns =>
{
    columns.Add(t => t.Project.Name).Titled("ProjectName").Sortable(true).SetWidth(110);
    columns.Add(t => t.Title)
        .Sortable(true)
        .Sanitized(false)
        .Encoded(false)
        .RenderValueAs(t => Html.ActionLink(t.Title, "Details", new { id = t.Id }));
    columns.Add(t => t.OwnerUser.UserName).Titled("Submitter").Sortable(true);

    //columns.Add().WithHeaderText("Developer")
    //        .WithVisibility(visible: true, allowChangeVisibility: true)
    //        .WithValueExpression(t => t.AssignedToUser.HasValue ? t.AssignedToUser.Value : "");
    //columns.Add(t => t.AssignedToUser.UserName).Titled("Developer").Sortable(true);
    //columns.Add(t => String.IsNullOrEmpty(t.AssignedToUser.UserName) ? "Your Message" : t.AssignedToUser.UserName).Titled("Developer").Encoded(false).Sortable(true);
    //columns.Add().Titled("Developer").Sortable(true).RenderValueAs(t => Html.TextBox("Developer", t.AssignedToUser.UserName, new { @id = "Id", @readonly = "readonly", @class = "form-control input-sm" }));
    //columns.Add(t => (t.AssignedToUser != null ? t.AssignedToUser.UserName : "No value")).Titled("Developer").Sortable(true);
    //columns.Add(t => ("#:t.AssignedToUser != null ? t.AssignedToUser.UserName : 'placeholder'#"));    

    //columns.Add(model => model.Type).Formatted("<span class=\"glyphicon glyphicon-{0}-open\"></span>").Encoded(false);
    //columns.Bound(t => t.AssignedToUser.UserName).Titled("Developer").Sortable(true);

    columns.Add(t => t.TicketType.Name).Titled("Type").Sortable(true).Filterable(true);
    columns.Add(t => t.TicketPriority.Name).Titled("Priority").Sortable(true).Filterable(true);
    columns.Add(t => t.TicketStatus.Name).Titled("Status").Sortable(true).Filterable(true);
    columns.Add(t => t.Created).Format("{0:dd/MM/yyyy}").Sortable(true).Filterable(true);
    columns.Add(t => t.Updated).Format("{0:dd/MM/yyyy}").Sortable(true).Filterable(true);
    columns.Add(t => t.TicketComments)
    .Titled("Comments")
    .Sortable(true)
    .Sanitized(false)
    .Encoded(false)
    .RenderValueAs(t => Html.ActionLink(t.TicketComments.Count.ToString(), "Index", "TicketComments", new { ticketId = t.Id }, null))
    .Css("text-center");
    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(t => Html.ActionLink("Edit", "Edit", new { id = t.Id }));
    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(t => Html.ActionLink("AddAttachment", "Index", "TicketAttachments", new { ticketId = t.Id }, null));
    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(t => Html.ActionLink("AddComment", "Create", "TicketComments", new { id = t.Id }, null));
}).WithPaging(10)

<div>
    @Html.ActionLink("Back to Home", "Index", "Home")
</div>
